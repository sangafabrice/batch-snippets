{
	"BAT FILE": {
		"scope": "bat",
		"prefix": "bat",
		"body": [
			"@Echo OFF\n",
			"PushD \"%~dp0\"\n",
			"SetLocal ENABLEDELAYEDEXPANSION\n",
			"$0\n",
			"EndLocal\n",
			"PopD\n",
			"GoTo :EOF",
		]
	},
	"ECHO": {
		"scope": "bat",
		"prefix": "echo",
		"body": [
			"Echo $0"
		],
		"description": "ECHO [message]. Display messages. ECHO without parameters displays the current echo setting."
	},
	"ECHO SWITCH": {
		"scope": "bat",
		"prefix": "@echo",
		"body": [
			"@Echo ${1|OFF,ON|}"
		],
		"description": "Turns command-echoing on or off."
	},
	"FOR": {
		"scope": "bat",
		"prefix": "for",
		"body": [
			"For %%${1:V} In (",
			"\t${2:set}",
			") Do (",
			"\t$0",
			")"
		]
	},
	"FOR /D: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-d",
		"body": [
			"For /D %%${1:V} In (",
			"\t${2:set}",
			") Do (",
			"\t$0",
			")"
		],
		"description": "If set contains wildcards, then specifies to match against directory names instead of file names."
	},
	"FOR /R: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-r",
		"body": [
			"For /R \"%~dp0\" %%${1:V} In (",
			"\t${2:set}",
			") Do (",
			"\t$0",
			")"
		],
		"description": "Walks the directory tree rooted at [drive:]path, executing the FOR statement in each directory of the tree.  If no directory specification is specified after /R then the current directory is assumed.  If set is just a single period (.) character then it will just enumerate the directory tree."
	},
	"FOR /L: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-l",
		"body": [
			"For /L %%${1:V} In (${2:%start%},${3:%step%},${4:%end%}) Do (",
			"\t$0",
			")"
		],
		"description": "The set is a sequence of numbers from start to end, by step amount."
	},
	"FOR /F FILESET: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-f",
		"body": [
			"For /F \"${1:Delims= }\" %%${2:V} In (",
			"\t${3:file-set}",
			") Do (",
			"\t$0",
			")"
		],
		"description": "file-set is one or more file names.  Each file is opened, read and processed before going on to the next file in file-set. Processing consists of reading in the file, breaking it up into individual lines of text and then parsing each line into zero or more tokens.  The body of the for loop is then called with the variable value(s) set to the found token string(s).  By default, /F passes the first blank separated token from each line of each file. Blank lines are skipped.  You can override the default parsing behavior by specifying the optional \"options\" parameter. This is a quoted string which contains one or more keywords to specify different parsing options."
	},
	"FOR /F STRING: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-f",
		"body": [
			"For /F \"${1:Skip=1 Tokens=1 Delims= }\" %%${2:V} In (\"${3:string}\") Do (",
			"\t$0",
			")"
		]
	},
	"FOR /F STRING UseBackq: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-f",
		"body": [
			"For /F \"UseBackq${1: Skip=1 Tokens=1 Delims= }\" %%${2:V} In ('${3:string}') Do (",
			"\t$0",
			")"
		]
	},
	"FOR /F COMMAND: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-f",
		"body": [
			"For /F \"${1:Skip=1 Tokens=1 Delims= }\" %%${2:V} In ('${3:command}') Do (",
			"\t$0",
			")"
		]
	},
	"FOR /F COMMAND UseBackq: CMDEXT ON": {
		"scope": "bat",
		"prefix": "for-f",
		"body": [
			"For /F \"UseBackq${1: Skip=1 Tokens=1 Delims= }\" %%${2:V} In (`${3:command}`) Do (",
			"\t$0",
			")"
		]
	},
	"Argument and Variable references": {
		"scope": "bat",
		"prefix": "varef",
		"body": [
			"%~${1|f,d,p,n,x,s,a,t,z,$PATH:|}"
		],
		"description": "Specifies an end of line comment character (just one)."
	},
	"IF EXIST": {
		"scope": "bat",
		"prefix": "if-exist",
		"body": [
			"If${1| , Not |}EXIST \"%~nx0\" (",
			"\t$0",
			")"
		]
	},
	"IF ERRORLEVEL": {
		"scope": "bat",
		"prefix": "if-errorlevel",
		"body": [
			"If${1| , Not |}ERRORLEVEL 0 (",
			"\t$0",
			")"
		]
	},
	"IF EQUAL": {
		"scope": "bat",
		"prefix": "if-equal",
		"body": [
			"If${1| , Not |}${2:%string1%}==${3:%string2%} (",
			"\t$0",
			")"
		]
	},
	"IF COMPARE: CMDEXT ON": {
		"scope": "bat",
		"prefix": "if",
		"body": [
			"If${1| , /I |}${3:%string1%} ${2|EQU,NEQ,LSS,LEQ,GTR,GEQ|} ${4:%string2%} (",
			"\t$0",
			")"
		]
	},
	"IF DEFINED: CMDEXT ON": {
		"scope": "bat",
		"prefix": "if-defined",
		"body": [
			"If${1| , Not |}DEFINED ${2:variable} (",
			"\t$0",
			")"
		]
	},
	"ELSE": {
		"scope": "bat",
		"prefix": "else",
		"body": [
			"Else (",
			"\t$0",
			")"
		]
	},
	"CD": {
		"scope": "bat",
		"prefix": "CD",
		"body": [
			"%CD%"
		]
	},
	"DATE": {
		"scope": "bat",
		"prefix": "DATE",
		"body": [
			"%DATE%"
		]
	},
	"TIME": {
		"scope": "bat",
		"prefix": "TIME",
		"body": [
			"%TIME%"
		]
	},
	"RANDOM": {
		"scope": "bat",
		"prefix": "RANDOM",
		"body": [
			"%RANDOM%"
		]
	},
	"ERRORLEVEL": {
		"scope": "bat",
		"prefix": "ERRORLEVEL",
		"body": [
			"%ERRORLEVEL%"
		]
	},
	"CALL SWITCH": {
		"scope": "bat",
		"prefix": "call-switch",
		"body": [
			"Call :Switch-${1:%variable%} 2> Nul || (",
			"\t$0",
			")",
			"GoTo EOS",
			":Switch-${2}",
			"\t$0",
			"\tGoTo :EOF",
			":Switch-${2}",
			"\t$0",
			"\tGoTo :EOF",
			":EOS"
		]
	},
	"GOTO SWITCH": {
		"scope": "bat",
		"prefix": "goto-switch",
		"body": [
			"GoTo Switch-${1:%variable%} 2> Nul || (",
			"\t$0",
			")",
			":Switch-${2}",
			"\t$0",
			"\tGoTo EOS",
			":Switch-${3}",
			"\t$0",
			":EOS"
		]
	},
	"GOTO": {
		"scope": "bat",
		"prefix": "goto",
		"body": [
			"GoTo${1| , :EOF|}"
		]
	},
	"PUSHD": {
		"scope": "bat",
		"prefix": "pushd",
		"body": [
			"PushD \"%~dp0\" && (",
			"\t$0",
			"\tPopD",
			")"
		]
	},
	"SET": {
		"scope": "bat",
		"prefix": "set",
		"body": [
			"Set${1| , /A , /P |}${2:variable=string}"
		]
	},
	"SETLOCAL": {
		"scope": "bat",
		"prefix": "setlocal",
		"body": [
			"SetLocal${1|\u200b, ENABLEDELAYEDEXPANSION|}"
		]
	},
	"ECHO NONEWLINE": {
		"scope": "bat",
		"prefix": "set-no-nl",
		"body": [
			"Set /P \"=${1:string}\" < Nul"
		]
	},
	"DELETE": {
		"scope": "bat",
		"prefix": "del",
		"body": [
			"Del ${1|/P,/F /S /Q|} Filespecs"
		]
	},
	"TEST ARGS": {
		"scope": "bat",
		"prefix": "echo-args",
		"body": [
			"Echo '%0' '%1' '%2' '%3' '%4' '%5' '%6' '%7' '%8' '%9'"
		]
	},
	"EXIT": {
		"scope": "bat",
		"prefix": "exit",
		"body": [
			"Exit /B ${1:0}"
		]
	},
}